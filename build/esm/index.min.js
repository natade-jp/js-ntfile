import fs from 'fs';
import child_process from 'child_process';

class NTFile{static saveTextFile(e,t){fs.writeFileSync(e,t,"utf-8");}static saveTextFileWithBOM(e,t){t.length>0&&"\ufeff"!==t.charAt(0)?fs.writeFileSync(e,"\ufeff"+t,"utf-8"):fs.writeFileSync(e,t,"utf-8");}static loadTextFile(e){const t=fs.readFileSync(e,"utf-8");return t.length>0&&"\ufeff"===t.charAt(0)?t.substring(1):t}static saveBinaryFile(e,t){const i=new Uint8Array(t.length);for(let e=0;e<i.length;e++)i[e]=t[e];fs.writeFileSync(e,i);}static loadBinaryFile(e){const t=fs.readFileSync(e),i=new Array(t.length);for(let e=0;e<t.length;e++)i[e]=t.readUInt8(e);return i}static exec(e){(0, child_process.execSync)(e);}static isExist(e){try{return fs.statSync(e),!0}catch(e){if("ENOENT"===e.code)return !1;console.log(e);}return !1}static isFile(e){return !!NTFile.isExist(e)&&fs.statSync(e).isFile()}static isDirectory(e){return !!NTFile.isExist(e)&&fs.statSync(e).isDirectory()}static copy(e,t){const i=fs.readFileSync(e);fs.writeFileSync(t,i);}static deleteFile(e){NTFile.isExist(e)&&fs.unlinkSync(e);}static makeDirectory(e){NTFile.isExist(e)||fs.mkdirSync(e);}static createList(e,t){const i=e.replace(/[\\/]+$/,""),s=fs.readdirSync(i),r=[];for(let e=0;e<s.length;e++)r[e]=i+"/"+s[e];for(let e=0;e<r.length;e++)if(NTFile.isDirectory(r[e])){const t=fs.readdirSync(r[e]);for(let i=0;i<t.length;i++){const s=r[e]+"/"+t[i];r.push(s);}}if(null==t)return r;const c=[];for(const e in r){const i=r[e];let s=!1;if(t.includes)for(const e in t.includes){const r=t.includes[e];if("string"==typeof r){if(-1===i.indexOf(r)){s=!0;break}}else if(r.test(i)){s=!0;break}}if(s){if(t.excludes)for(const e in t.excludes){const r=t.excludes[e];if("string"==typeof r){if(-1===i.indexOf(r)){s=!1;break}}else if(r.test(i)){s=!1;break}}s&&c.push(i);}}return c}static deleteDirectory(e){if(NTFile.isDirectory(e)){{const t=NTFile.createList(e);for(let e=0;e<t.length;e++)NTFile.isFile(t[e])&&NTFile.deleteFile(t[e]);}for(let t=0;t<10;t++){const t=NTFile.createList(e);for(let e=0;e<t.length;e++)0===NTFile.createList(t[e]).length&&fs.rmdirSync(t[e]);}fs.rmdirSync(e);}}static getEnvironmentFile(e){const t=NTFile.loadTextFile(e).split(/\r?\n/g),i={};for(let e=0;e<t.length;e++){let s=t[e];if(s=s.replace(/#.*/,"").trim(),0===s.length)continue;if(!/=/.test(s))continue;const r=s.replace(/=.*/,"").trim();let c=s.replace(/[^=]+=/,"").trim();/^".*"$/.test(c)&&(c=c.replace(/^"(.*)"$/,"$1")),i[r]=c;}return i}}

export { NTFile as default };
